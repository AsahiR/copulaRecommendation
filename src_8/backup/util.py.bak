import pandas as pd
import numpy as np
from marginal import marginal
import urllib
import json
from typing import Dict, List


ALL_ITEMS = pd.read_json("../data50/all_items.json")
DEFAULT_SCORE_TYPE_LIST = ['chargeScore', 'distanceScore', 'serviceScore', 'locationScore', 'roomScore',
                           'bathScore', 'equipmentScore', 'mealScore', 'kinnennScore']
NORM_DICT = {x:marginal.Norm(ALL_ITEMS[x]) for x in DEFAULT_SCORE_TYPE_LIST}


def kl_divergence_between_population_and_users(users_model: marginal.Norm, score_type: str) -> float:
    if score_type not in DEFAULT_SCORE_TYPE_LIST:
        raise ValueError
    population = NORM_DICT[score_type]
    mean1 = population.mean
    mean2 = users_model.mean
    var1 = population.sd ** 2
    var2 = users_model.sd ** 2
    return (np.log(var2/var1) + (var1/var2) + (((mean1 - mean2) ** 2) / var2) - 1) / 2


def list_of_users_axis_has_weight(user_id: int) -> List[str]:
    preference = get_users_preferences(user_id)
    return [k for k, v in preference.items() if not v == 0]


def get_users_preferences(user_id: int) -> Dict[str, float]:
    data = {}
    with open("../data50/questionair/user" + str(user_id) + "axis.txt", "r") as file:
        file.readline() # Discard first line for columns description
        line = file.readline()
        while line:
            chunk = line.split(',')
            data[chunk[0] + 'Score'] = int(chunk[1].replace('\n', '')) / 100
            line = file.readline()
    return data

def get_users_main_axis(user_id: int) -> Dict[str, float]:
    preference = get_users_preferences(user_id)
    sorted_pr = [k for k, v in sorted(preference.items(), key=lambda x: x[1])]
    return sorted_pr[-1]


def adhoc_task():
    ROLE1 = [7, 12]
    ROLE2 = [1, 2, 5, 6]
    ROLE3 = [8, 9, 10]
    ROLE4 = [3, 4, 11]

    user_all = []
    user_all.append(pd.read_json("../data50/user1_kfolded.json"))
    user_all.append(pd.read_json("../data50/user2_kfolded.json"))
    user_all.append(pd.read_json("../data50/user3_kfolded.json"))
    user_all.append(pd.read_json("../data50/user4_kfolded.json"))
    user_all.append(pd.read_json("../data50/user5_kfolded.json"))
    user_all.append(pd.read_json("../data50/user6_kfolded.json"))
    user_all.append(pd.read_json("../data50/user7_kfolded.json"))
    user_all.append(pd.read_json("../data50/user8_kfolded.json"))
    user_all.append(pd.read_json("../data50/user9_kfolded.json"))
    user_all.append(pd.read_json("../data50/user10_kfolded.json"))
    user_all.append(pd.read_json("../data50/user11_kfolded.json"))
    user_all.append(pd.read_json("../data50/user12_kfolded.json"))

    user_norm = [{x:marginal.Norm(user[x]) for x in DEFAULT_SCORE_TYPE_LIST} for user in user_all]

    dic = {}
    for x in DEFAULT_SCORE_TYPE_LIST:
        dic[x] = 0
    for i in ROLE4:
        norm_dict = user_norm[i-1]
        for x in DEFAULT_SCORE_TYPE_LIST:
            dic[x] += np.log1p(kl_divergence_between_population_and_users(norm_dict[x], x))

    for k, v in dic.items():
        men = v / len(ROLE4)
        print(k, men)
